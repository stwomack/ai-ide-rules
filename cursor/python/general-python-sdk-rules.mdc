---
description:
globs:
alwaysApply: true
---

## Overview

Temporal’s Python SDK lets you author **Workflows** and **Activities** in pure Python while Temporal Server provides fault‑tolerant orchestration. This document provides generic rules to be applied when creating _any_ Temporal application. Other rules files will be specified around Temporal specific freatures.

## Project Structure

Organize the project with clear separation of concerns:
- `workflows/`: Define all Temporal workflows here.
- `activities/`: Implement all activity definitions.
- `tests/`: Place unit tests and integration tests in this directory.
- `models/`: Define dataclasses and constants used across multiple files.
- `utils/`: Include reusable utilities and helpers.

## File Structure

- Code for a Workflow, Activities, and Workers should be organized in separate files. 
- Name workflow files with a `_workflow` suffix (e.g., `process_order_workflow`).
- Name activities files with an `_activity` suffix (e.g., `send_email_activity`).

## Task Queues

- All Task Queue names should be stored as a constant in the `models` directory.
- All client and worker code should import the stored constant and use that variable instead of hardcoding the value of the task queue.

## Sandbox Environment Environment

Temporal’s workflow sandbox isolates global state and intercepts known non‑deterministic calls.

**Benefits** – Catches non‑determinism early; allows pass‑through of safe modules for performance.
**How it works** – Uses `exec` to import workflow files into an isolated module graph and applies runtime proxies to restrict dangerous stdlib APIs.
**Pass‑through modules** – Mark deterministic third‑party libs (e.g., `pydantic`) via `with workflow.unsafe.imports_passed_through()` or Worker restrictions to avoid repeated imports.
**Skipping** – For rare cases, wrap code in `workflow.unsafe.sandbox_unrestricted()` or set `sandboxed=False` on `@workflow.defn`; document the rationale as sandbox checks are lost.

## General Principles
- Write concise, readable Python code.
- Follow PEP 8 and PEP 257 for style and documentation.
- Use Python type hints in all functions and methods.
- Document all workflows and activities using descriptive docstrings.

## Naming Conventions
- **Variables and Functions**: snake_case
- **Classes**: PascalCase
- **Files**: snake_case

## Package Management

- Use `uv` for all package management and virtual environment management
- Create a valid `pyproject.toml` file that works with `uv`
- Do not create the lock file. This should be done when running `uv`.
- Ensure `temporalio` is listed in dependencies.


## Documentation Standards

- Use Python docstrings for all workflows and activities:
  ```python
  @workflow.defn
  class ProcessOrderWorkflow:
      """Workflow for processing an order."""
  ```
- Add in-line comments explaining complex segments of code

## Testing Standards

- Write tests for all workflows and activities using `pytest`.
- Be sure to include `pytest-asyncio` for testing async python code
- Maintain at least 80% code coverage.

## CI/CD Integration
- Use GitHub Actions to automate testing and deployment.
- When possible, consolidate tooling. Use as few tools as possible
- Use tools from astral.sh (like ruff, uv) whenever possible
- Include the following checks:
  - Linting with `ruff`.
  - Type checking with `mypy`.
  - Unit testing with `pytest`.