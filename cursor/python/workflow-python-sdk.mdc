---
description:
globs: "*workflow.py"
alwaysApply: false
---

## Defining a Workflow

- A Workflow should be implemented as a class.
- The class should be decorated with the `@workflow.defn` decorator.
- The method designated as the entry point should be decorated with the `@workflow.run` decorator, and be async.
- There can only be one entry point per Workflow class.
- There should only be one Workflow class per file.
- Workflow code must be deterministic.
    - All non-deterministic code should be implemented in an Activity.

## Input and Output from Workflow and Activities

### Workflow Example
```python
from temporalio import workflow

@workflow.defn
class GreetingWorkflow:
    """Workflow to process customer orders."""

    @workflow.run
    async def run(self, name: str) -> str:
        
        return f"Hello {name}!"
```

## Asyncio and a Custom Event Loop

- Temporal implemented a custom asyncio event loop. 
- Most `asyncio` action you can perform within a Workflow will use this event loop and is safe to do within Temporal.
- Certain `asyncio` features are disabled
    - Thread related calls such as `to_thread()`, `run_coroutine_threadsafe()`, `loop.run_in_executor()`, etc
    - Calls that alter the event loop such as `loop.close()`, `loop.stop()`, `loop.run_forever()`, `loop.set_task_factory()`, etc
    - Calls that use anything external such as networking, subprocesses, disk IO, etc
- `asyncio` utilities that internally use `set()` can make them non-deterministic from one Worker to the next. Therefore the following `asyncio` function have `workflow`-module alternatives that are deterministic
    - `asyncio.as_completed()` - use `workflow.as_completed()` 
    - `asyncio.wait()` - use `workflow.wait()`

## Timers

- Timers are durable in Temporal, meaning you can set a timer for a long period of time and expect it to fire successfully
- The `workflow.sleep` call from the Temporal Python SDK is a wrapper around `asyncio.sleep`, accepts a timedelta for the duration, and allows a keyword argument summary to be provided as metadata.

### Timer Example

```python
from temporalio import workflow
from datetime import timedelta


@workflow.defn
class GreetSomeone:
    """Workflow to process customer orders."""

    @workflow.run
    async def run(self, name: str) -> str:
        # The below Workflow code will sleep for 1 day and print 'Hello <NAME>'
        # with the name that is passed in

        await workflow.sleep(timedelta(days=1), summary="Sleep for one day")
        return f"Hello {name}!"
```


## Handling Long Running Workflows with ContinueAsNew

- Temporal Workflow Event Histories have a limit on the size and number of events allowed
    - Warnings begin to appear at 10k events, and a Workflow will be terminated at 50k events
- Use the `workflow.continue_as_new()` method to close the current Workflow Execution, and start a new one with a new Event History, continuing from where it currently was.
- Workflows don't need to calculate the Event History, they can use the `worfklow.is_continue_as_new_suggested()` method to determine when to continue as new


### ContinueAsNew Example

```python
from temporalio import workflow
from datetime import timedelta


@workflow.defn
class GreetSomeone:
    """Workflow that counts to 1,000,000, continuing as new when necessary"""

    @workflow.run
    async def run(self, count: int) -> str:

        x = count
        while x < 100000:
            x += 1
            print(x)
            await workflow.sleep(timedelta(seconds=1), summary="Sleep for one second")

            if workflow.info().is_continue_as_new_suggested():
                workflow.continue_as_new(x)

        return f"Done"
```

## Testing

- Use `pytest` for testing
- Use the `WorkflowEnvironment` class for running Workflow code. This will start a Temporal service to test against
- In the `WorkflowEnvironment` other features will work differently too, such as Timers having the ability to skip time
- Decorate Workflow tests with `@pytest.mark.asyncio` so they can be tested properly async
- Workflow test names should follow the format f"test{workflow_name}_{thing_to_be_tested}.py"
    - Example. If a Workflow is named `sum_of_squares_workflow.py`, the test should be named `test_sum_of_squares_workflow_positive_input.py`

### Testing Example

```python
import pytest
from temporalio.testing import WorkflowEnvironment
from temporalio.worker import Worker
from workflow import SumOfSquaresWorkflow
from activities import SquareActivities

@pytest.mark.asyncio
async def test_sum_of_squares_positive():
    async with await WorkflowEnvironment.start_time_skipping() as env:
        activities = SquareActivities()
        async with Worker(
            env.client,
            task_queue="test-math-queue",
            workflows=[SumOfSquaresWorkflow],
            activities=[activities.square],
        ):
            result = await env.client.execute_workflow(
                SumOfSquaresWorkflow.calculate_sum_of_squares,
                5,
                6,
                id="test-sum-of-squares",
                task_queue="test-math-queue",
            )

            assert 61 == result
```

## Replay Testing

- All Workflows should implement Replay Testing to detect non-deterministic changes to the code as the code is updated
- The Event History from a previously successful closed execution should be downloaded and provided to the test to run against
- Name the test f"test_{workflow_name}_replay.py"

### Retrieving the Event History using the Python SDK Example

```python
from temporalio.client import Client, WorkflowHistory

async def get_workflow_histories(my_client: Client):
    workflow_history = await my_client.list_workflows("WorkflowType = 'ExampleWorkflow'").map_histories()
```

### Retrieving the Event History using the Temporal Client

```bash
temporal workflow show \
 --workflow-id Your-Custom-Workflow-Id \
 --fields long \
 --output json > workflow_output.json
```

### Replay Testing Example

```python
import pytest
from temporalio.client import WorkflowHistory
from temporalio.worker import Replayer
from workflow import LoanProcessingWorkflow


@pytest.mark.asyncio
async def test_successful_replay():
    with open("tests/history_for_original_execution.json", "r") as fh:
        history = fh.read()
    replayer = Replayer(workflows=[LoanProcessingWorkflow])
    await replayer.replay_workflow(
        WorkflowHistory.from_json("loan-processing-workflow-customer-a100", history)
    )
```